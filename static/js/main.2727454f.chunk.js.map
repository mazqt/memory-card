{"version":3,"sources":["components/Score.js","components/Card.js","components/Hand.js","components/SetPicker.js","components/ColourPicker.js","App.js","index.js"],"names":["Score","props","score","highscore","Card","console","log","card","src","imageUrl","onClick","chooseCard","bind","name","alt","Hand","hand","SetPicker","onChange","onChangeSet","value","selectedSet","magicSets","map","set","code","ColourPicker","onChangeColour","selectedColour","App","mtg","require","useState","playing","setPlaying","magicSet","setMagicSet","colour","setColour","cards","setCards","loading","setLoading","setScore","setHand","setHighscore","usedCards","setUsedCards","setMagicSets","loadingSets","setLoadingSets","a","where","colors","contains","response","type","sets","useEffect","fetchSets","indexes","index","Math","floor","random","length","includes","push","newHand","createHand","fetchSet","className","event","setCode","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2727454f.chunk.js","sourcesContent":["function Score(props) {\n  return (\n    <div>\n      <h1>I'm the score</h1>\n      <h1>{props.score}</h1>\n      <h1>I'm the highscore</h1>\n      <h1>{props.highscore}</h1>\n    </div>\n  );\n}\n\nexport default Score;\n","function Card(props) {\n  console.log(props.card);\n  return (\n    <div>\n      <h1>I'm the card</h1>\n      <img\n        src={props.card.imageUrl}\n        onClick={props.chooseCard.bind(null, props.card.name)}\n        alt={props.card.name}\n      ></img>\n    </div>\n  );\n}\n\nexport default Card;\n","import Card from \"./Card\";\n\nfunction Hand(props) {\n  return (\n    <div>\n      <button onClick={props.chooseCard}>Score</button>\n      <Card chooseCard={props.chooseCard} card={props.hand[0]} />\n      <Card chooseCard={props.chooseCard} card={props.hand[1]} />\n      <Card chooseCard={props.chooseCard} card={props.hand[2]} />\n      <Card chooseCard={props.chooseCard} card={props.hand[3]} />\n      <Card chooseCard={props.chooseCard} card={props.hand[4]} />\n      <Card chooseCard={props.chooseCard} card={props.hand[5]} />\n      <Card chooseCard={props.chooseCard} card={props.hand[6]} />\n    </div>\n  );\n}\n\nexport default Hand;\n","function SetPicker(props) {\n  return (\n    <div>\n      <select onChange={props.onChangeSet} value={props.selectedSet}>\n        {props.magicSets.map((set) => {\n          return <option value={set.code}>{set.name}</option>;\n        })}\n      </select>\n    </div>\n  );\n}\n\nexport default SetPicker;\n","function ColourPicker(props) {\n  return (\n    <div>\n      <select onChange={props.onChangeColour} value={props.selectedColour}>\n        <option value=\"White\">White</option>\n        <option value=\"Black\">Black</option>\n        <option value=\"Red\">Red</option>\n        <option value=\"Green\">Green</option>\n        <option value=\"Blue\">Blue</option>\n      </select>\n    </div>\n  );\n}\n\nexport default ColourPicker;\n","import React, { useState, useEffect } from \"react\";\nimport Score from \"./components/Score\";\nimport Hand from \"./components/Hand\";\nimport SetPicker from \"./components/SetPicker\";\nimport ColourPicker from \"./components/ColourPicker\";\n\nfunction App() {\n  const mtg = require(\"mtgsdk\");\n  const [playing, setPlaying] = useState(false);\n  const [magicSet, setMagicSet] = useState(\"DOM\");\n  const [colour, setColour] = useState(\"White\");\n  const [cards, setCards] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [score, setScore] = useState(0);\n  const [hand, setHand] = useState([]);\n  const [highscore, setHighscore] = useState(0);\n  const [usedCards, setUsedCards] = useState([]);\n  const [magicSets, setMagicSets] = useState([]);\n  const [loadingSets, setLoadingSets] = useState(true);\n\n  async function fetchSet() {\n    setLoading(true);\n    let response = await mtg.card.where({\n      set: magicSet,\n      colors: colour,\n      contains: \"imageUrl\",\n    });\n    setCards(response);\n    setLoading(false);\n  }\n\n  async function fetchSets() {\n    setLoadingSets(true);\n    let response = await mtg.set.where({ type: \"core\" | \"expansion\" });\n    let sets = [...response];\n    response = await mtg.set.where({ type: \"expansion\" });\n    sets = [...sets, ...response];\n    setMagicSets(sets);\n    setLoadingSets(false);\n    console.log(sets);\n  }\n\n  function createHand() {\n    let indexes = [];\n    do {\n      let index = Math.floor(Math.random() * cards.length);\n      if (!indexes.includes(index)) {\n        indexes.push(index);\n      }\n    } while (indexes.length < 7);\n    let newHand = indexes.map((index) => cards[index]);\n    setHand(newHand);\n  }\n\n  useEffect(() => {\n    fetchSets();\n  }, []);\n\n  useEffect(() => {\n    if (cards !== null) {\n      createHand();\n      console.log(cards);\n    }\n  }, [cards, score]);\n\n  useEffect(() => {\n    fetchSet();\n  }, [colour, magicSet]);\n\n  const magicSetHandler = (event) => {\n    const setCode = event.target.value;\n    setMagicSet(setCode);\n  };\n\n  const magicColourHandler = (event) => {\n    const colour = event.target.value;\n    setColour(colour);\n  };\n\n  const chooseCard = (name) => {\n    if (!usedCards.includes(name)) {\n      setScore(score + 1);\n      if (score >= highscore) {\n        setHighscore(score + 1);\n      }\n      setUsedCards([...usedCards, name]);\n    } else {\n      setScore(0);\n      setUsedCards([]);\n    }\n  };\n\n  if (playing) {\n    return (\n      <div>\n        <Score score={score} highscore={highscore} />\n        <Hand chooseCard={chooseCard} hand={hand} />\n        <button onClick={setPlaying.bind(null, false)}>Toggle Playing</button>\n      </div>\n    );\n  } else {\n    if (loading || loadingSets) {\n      return <h1>Still loading!</h1>;\n    } else {\n      return (\n        <div className=\"App\">\n          <SetPicker\n            onChangeSet={magicSetHandler}\n            selectedSet={magicSet}\n            magicSets={magicSets}\n          />\n          <ColourPicker\n            onChangeColour={magicColourHandler}\n            selectedColour={colour}\n          />\n          <button onClick={setPlaying.bind(null, true)}>Toggle Playing</button>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}